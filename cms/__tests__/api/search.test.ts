/**
 * Search API Tests
 * Tests the search functionality including main search, suggestions, and analytics
 */

import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';
import { NextRequest } from 'next/server';
import { GET as searchHandler } from '@/app/api/search/route';
import { GET as suggestionsHandler } from '@/app/api/search/suggestions/route';
import { POST as analyticsHandler, GET as analyticsGetHandler } from '@/app/api/search/analytics/route';

// Mock next-auth
jest.mock('next-auth', () => ({
  getServerSession: jest.fn()
}));

// Mock the auth options
jest.mock('@/lib/auth', () => ({
  authOptions: {}
}));

// Mock the search service
jest.mock('@/lib/search', () => ({
  searchService: {
    search: jest.fn(),
    getSuggestions: jest.fn(),
    getPopularTerms: jest.fn(),
    indexContent: jest.fn(),
    removeFromIndex: jest.fn()
  }
}));

import { getServerSession } from 'next-auth';
import { searchService } from '@/lib/search';

const mockGetServerSession = getServerSession as jest.MockedFunction<typeof getServerSession>;
const mockSearchService = searchService as jest.Mocked<typeof searchService>;

describe('Search API', () => {
  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();
    
    // Mock authenticated session
    mockGetServerSession.mockResolvedValue({
      user: { id: '1', email: 'test@example.com' }
    } as any);
  });

  describe('GET /api/search', () => {
    it('should return search results for valid query', async () => {
      const mockResults = {\n        results: [\n          {\n            id: '1',\n            title: 'Test Product',\n            content: 'This is a test product description',\n            type: 'product' as const,\n            url: '/products/test-product',\n            score: 0.95,\n            highlights: {\n              title: 'Test <mark>Product</mark>',\n              content: 'This is a test <mark>product</mark> description'\n            },\n            metadata: {\n              category: 'Electronics',\n              tags: ['test', 'product'],\n              status: 'PUBLISHED',\n              creator: 'Test User',\n              createdAt: '2024-01-01T00:00:00Z',\n              updatedAt: '2024-01-01T00:00:00Z'\n            }\n          }\n        ],\n        totalCount: 1,\n        facets: {\n          types: { product: 1 },\n          statuses: { PUBLISHED: 1 },\n          categories: { Electronics: 1 }\n        }\n      };\n\n      mockSearchService.search.mockResolvedValue(mockResults);\n\n      const request = new NextRequest('http://localhost:3000/api/search?query=product&types=product&limit=10');\n      const response = await searchHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.results).toHaveLength(1);\n      expect(data.results[0].title).toBe('Test Product');\n      expect(data.totalCount).toBe(1);\n      expect(mockSearchService.search).toHaveBeenCalledWith({\n        query: 'product',\n        types: ['product'],\n        limit: 10,\n        offset: 0,\n        sortBy: 'relevance',\n        sortOrder: 'desc',\n        filters: {}\n      });\n    });\n\n    it('should return 400 for missing query parameter', async () => {\n      const request = new NextRequest('http://localhost:3000/api/search');\n      const response = await searchHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Query parameter is required');\n    });\n\n    it('should return 401 for unauthenticated requests', async () => {\n      mockGetServerSession.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/search?query=test');\n      const response = await searchHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Unauthorized');\n    });\n\n    it('should handle search with filters', async () => {\n      const mockResults = {\n        results: [],\n        totalCount: 0,\n        facets: {}\n      };\n\n      mockSearchService.search.mockResolvedValue(mockResults);\n\n      const request = new NextRequest(\n        'http://localhost:3000/api/search?query=test&types=product,page&status=PUBLISHED&category=Electronics&tags=featured&dateStart=2024-01-01&dateEnd=2024-12-31'\n      );\n      const response = await searchHandler(request);\n\n      expect(response.status).toBe(200);\n      expect(mockSearchService.search).toHaveBeenCalledWith({\n        query: 'test',\n        types: ['product', 'page'],\n        limit: 10,\n        offset: 0,\n        sortBy: 'relevance',\n        sortOrder: 'desc',\n        filters: {\n          status: ['PUBLISHED'],\n          category: ['Electronics'],\n          tags: ['featured'],\n          dateStart: '2024-01-01',\n          dateEnd: '2024-12-31'\n        }\n      });\n    });\n\n    it('should handle pagination parameters', async () => {\n      const mockResults = {\n        results: [],\n        totalCount: 0,\n        facets: {}\n      };\n\n      mockSearchService.search.mockResolvedValue(mockResults);\n\n      const request = new NextRequest(\n        'http://localhost:3000/api/search?query=test&limit=20&offset=40&sortBy=date&sortOrder=asc'\n      );\n      const response = await searchHandler(request);\n\n      expect(response.status).toBe(200);\n      expect(mockSearchService.search).toHaveBeenCalledWith({\n        query: 'test',\n        types: ['product', 'page', 'media'],\n        limit: 20,\n        offset: 40,\n        sortBy: 'date',\n        sortOrder: 'asc',\n        filters: {}\n      });\n    });\n  });\n\n  describe('GET /api/search/suggestions', () => {\n    it('should return suggestions for valid query', async () => {\n      const mockSuggestions = ['product', 'productivity', 'professional'];\n      mockSearchService.getSuggestions.mockReturnValue(mockSuggestions);\n\n      const request = new NextRequest('http://localhost:3000/api/search/suggestions?query=pro&limit=5');\n      const response = await suggestionsHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.suggestions).toEqual(mockSuggestions);\n      expect(data.query).toBe('pro');\n      expect(data.type).toBe('suggestions');\n      expect(mockSearchService.getSuggestions).toHaveBeenCalledWith('pro', 5);\n    });\n\n    it('should return popular terms when no query provided', async () => {\n      const mockPopularTerms = ['workspace', 'desk', 'chair', 'lighting'];\n      mockSearchService.getPopularTerms.mockReturnValue(mockPopularTerms);\n\n      const request = new NextRequest('http://localhost:3000/api/search/suggestions?limit=5');\n      const response = await suggestionsHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.suggestions).toEqual(mockPopularTerms.slice(0, 5));\n      expect(data.type).toBe('popular');\n      expect(mockSearchService.getPopularTerms).toHaveBeenCalled();\n    });\n\n    it('should return 401 for unauthenticated requests', async () => {\n      mockGetServerSession.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/search/suggestions?query=test');\n      const response = await suggestionsHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Unauthorized');\n    });\n  });\n\n  describe('POST /api/search/analytics', () => {\n    it('should track search events', async () => {\n      const request = new NextRequest('http://localhost:3000/api/search/analytics', {\n        method: 'POST',\n        body: JSON.stringify({\n          action: 'search',\n          query: 'test product',\n          resultsCount: 5,\n          searchTime: 150\n        })\n      });\n\n      const response = await analyticsHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n    });\n\n    it('should track click events', async () => {\n      const request = new NextRequest('http://localhost:3000/api/search/analytics', {\n        method: 'POST',\n        body: JSON.stringify({\n          action: 'click',\n          query: 'test product',\n          resultId: 'product-123',\n          position: 1,\n          resultType: 'product'\n        })\n      });\n\n      const response = await analyticsHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n    });\n\n    it('should return 400 for invalid action', async () => {\n      const request = new NextRequest('http://localhost:3000/api/search/analytics', {\n        method: 'POST',\n        body: JSON.stringify({\n          action: 'invalid',\n          query: 'test'\n        })\n      });\n\n      const response = await analyticsHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Invalid action');\n    });\n\n    it('should return 401 for unauthenticated requests', async () => {\n      mockGetServerSession.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/search/analytics', {\n        method: 'POST',\n        body: JSON.stringify({\n          action: 'search',\n          query: 'test'\n        })\n      });\n\n      const response = await analyticsHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Unauthorized');\n    });\n  });\n\n  describe('GET /api/search/analytics', () => {\n    it('should return overview analytics', async () => {\n      const request = new NextRequest('http://localhost:3000/api/search/analytics?type=overview');\n      const response = await analyticsGetHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.overview).toBeDefined();\n      expect(typeof data.overview.totalSearches).toBe('number');\n      expect(typeof data.overview.uniqueQueries).toBe('number');\n      expect(typeof data.overview.noResultsRate).toBe('number');\n    });\n\n    it('should return popular terms analytics', async () => {\n      const request = new NextRequest('http://localhost:3000/api/search/analytics?type=popular-terms&limit=10');\n      const response = await analyticsGetHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.popularTerms).toBeDefined();\n      expect(Array.isArray(data.popularTerms)).toBe(true);\n    });\n\n    it('should return no-results analytics', async () => {\n      const request = new NextRequest('http://localhost:3000/api/search/analytics?type=no-results&limit=10');\n      const response = await analyticsGetHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.noResultsQueries).toBeDefined();\n      expect(Array.isArray(data.noResultsQueries)).toBe(true);\n    });\n\n    it('should return click-through analytics', async () => {\n      const request = new NextRequest('http://localhost:3000/api/search/analytics?type=click-through');\n      const response = await analyticsGetHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.clickThroughRates).toBeDefined();\n      expect(data.topClickedQueries).toBeDefined();\n      expect(typeof data.totalClicks).toBe('number');\n    });\n\n    it('should return 400 for invalid analytics type', async () => {\n      const request = new NextRequest('http://localhost:3000/api/search/analytics?type=invalid');\n      const response = await analyticsGetHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Invalid analytics type');\n    });\n\n    it('should return 401 for unauthenticated requests', async () => {\n      mockGetServerSession.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/search/analytics?type=overview');\n      const response = await analyticsGetHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Unauthorized');\n    });\n  });\n});